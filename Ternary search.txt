------Ternary search------
/*
 * 1- Ternary Search is a divide and conquer search algorithm like Binary search. Divides data, and drop some parts and conquer others .
 * 2- In the given RANGE, function must be either: STRICTLY INCREASING then STRICTLY DECCREASING Or reverse
 * 3- Hence, function has only 1 mode (one min or max val)
 * 4- We target finding this mode.
 * 5- Divide space to 3 parts, target mode either in the first 2 parts or last 2 parts.
 *
 * Let a unimodal function f(x) on some interval [l; r]. Take any two points m1 and m2 in this segment: l < m1 < m2 < r. Then there are three possibilities:

 if f(m1) < f(m2), then the required maximum can not be located on the left side - [l; m1].
 It means that the maximum further makes sense to look only in the interval [m1;r]
 if f(m1) > f(m2), that the situation is similar to the previous, up to symmetry.
 Now, the required maximum can not be in the right side - [m2; r], so go to the segment [l; m2]
 if f(m1) = f(m2), then the search should be conducted in [m1; m2], but this case can be attributed to any of the PREVIOUS two (in order to simplify the code).
 */

/*
 * A typical example will be given strictly decreasing then increasing sequence, find min value. Let's try a better example
 *
 * We are given set of integers, find a position (once real and once integer) that has minimum absolute difference summation
 *
 * Then f function is as below. For a given position, sum distances
 */
/*
 * How to think ternary? If it is ternary, say we search for min value, then you know we keep decreasing, then increasing starts.
 * Think in the order of x ~-> f(x) that you need to try, and have intuitive if the given function behaves as we need or not.
 *
 * An intuitive of x's typically will be sorted numbers. Say sorted numbers are 1 2 3 4 5 6 7
 *
 * Say we evaluated the value at first position, we expect sum to be so high -> 21
 * Now, think what happens when we move to right 1 step?
 *
 * We got -6 from the left 6 numbers and got +1 for right number -> 16
 *
 * So the more we move to left, we become nearer to left numbers, and further from right numbers
 *
 * F function gives: 21 16 13 12 13 16 21.
 *
 * So search seems ternable search, one more validation is required, is inc/dec strict? Homework
 *
 * Note, although 16 is duplicate, it is strict dec, then strict enc
 *
 * What if numbers are: 1 2 3 4 4 4 4 5 6 7 8
 *
 * F function is : 37 28 21 16 16 16 16 19 24 31 40
 *
 * Number 16 is repeated 4 times! So definitely this is not strict and ternary won't work!
 *
 * True, but algorithm will work if the repetition in the mode value only. Homework: Validate! Don't take every thing as fact :)
 *
 * Homework: why ternary needs f space to be strict?
 *
 * E.g. if we want to find minimum value in given list 5 1 5 5 5 5 5, answer may be 5 not 1
 */

/*
 * What if we are given set of points (x, y) and need to find point p that has minimum Manhattan distance summation?
 * 	Now problem became 2D :(
 *
 * Remember the Independence feature
 * 		Minimize Manhattan Distance = Minimize on Xs + Minimize on Ys
 *
 * 		Hence once in 1D find best x, and once find best y
 *
 * 	What if function is square of the Euclidean distance?
 *
 * 	Similarly: Sum(Pi, p) = Sum (Pi.x-p.x)^2 + Sum (Pi.y-p.y)^2		for i [1-n], and p is target point
 *
 *
 *  What if function is the Euclidean distance?!!!
 *  Now it is really a 2D problem! You can't do a split!
 *
 *  This where Nested Ternary appears. We have 2 F functions.
 *  First ternary works on X in x ranges and call FX(x)
 *
 *  FX is a nested ternary function that works on y, given x and evaluates FXY(x, y)
 *
 *  WAIT! For both functions, you must guarantee that their spaces are strict dec/enc! Homework
 *
 *  Homework: Read about Golden section search and Fibonacci search
 */
/*
 * There are little problems on ternary, and due to algorithm nature many of them in geometry, which is not easy field.
 *
 * Proving that space allows for ternary is always hard. One of interesting and popular cases when space is convex function.
 * Studying convex function and their properties let you prove/solve many ternary search problems.
 */

Implmentation for double
-------------------------------------------------------------------------------------------------

double left = 0 , right = 1e5;
    while(right - left >=eps ) {
        double m1 = left + (right - left) / 3.0;
        double m2 = right - (right - left) / 3.0;
        if (f(m1) > f(m2)) {
            left = m1;
        } else {
            right = m2;
        }
    }
-------------------------------------------------------------------------------------------------

Implmentation for int
-------------------------------------------------------------------------------------------------
while(B - A > 4)
{
    int m1 = (A + B) / 2;
    int m2 = (A + B) / 2 + 1;

    if(f(m1) > f(m2))
       A = m1;
    else
       B = m2;
}

ans = inf;

for(int i = A; i <= B; i++)
    ans = min(ans , f(i));