vector<int>lds(vector<int>&v,int n){
    vector<int>dp(n,1);
    for(int i=n-1;i>=0;i--)
    {
        for(int j=n-1;j>i;j--)
        {
            if(v[j]>v[i])
                dp[i]=max(dp[j]+1,dp[i]);
        }
    }
    return dp;
}
vector<int>lis(vector<int>&v,int n){
    vector<int>dp(n,1);//return the length of the longest increaing subsequence -->slow version
    int my_max=0;
    for(int i=n-1;i>=0;i--)
    {
        for(int j=n-1;j>i;j--)
        {
            if(v[j]<v[i])
                dp[i]=max(dp[j]+1,dp[i]);
            my_max=max(my_max,dp[i]);
        }
    }
    return dp;
}//generate the longest chain if we can take the element from front and but it back
for(int i=0;i<n;i++)res=max(res,lis[i]+lds[i]-1);
//get the dp array for lis,lds in nlog(n)
vector<int>lds(vector<int>&v,int n){
    vector<int>dp(n,1);//return the length of the longest increaing subsequence -->slow version
    vector<int>k;
    k.push_back(v[n-1]);
    for(int i=n-2;i>0;i--)
    {
        if(v[i]>k.back())
            k.emplace_back(v[i]),dp[i]=(int)k.size();
        else
        {
            int tt= lower_bound(k.begin(),k.end(),v[i])-k.begin();
            dp[i]=max(dp[i],tt+1);
            k[tt]=v[i];
        }
    }
    return dp;
}
vector<int>lis(vector<int>&v,int n){
    vector<int>dp(n,1);//return the length of the longest increaing subsequence -->slow version
    vector<int>k;
    k.push_back(v[0]);
    for(int i=1;i<n;i++)
    {
        if(v[i]>k.back())
            k.emplace_back(v[i]),dp[i]=(int)k.size();
        else
        {
            int tt= lower_bound(k.begin(),k.end(),v[i])-k.begin();
            dp[i]=max(dp[i],tt+1);
            k[tt]=v[i];
        }
    }
    return dp;
}


//return the lis it self
vector<int>get_lis(vector<int>& arr,int n)
{
    vector<int>dp(n,1);//return the orginal longest increasing subsequence
    int my_max=0;
    int pos=0;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            if(arr[j]<arr[i])
                dp[i]=max(dp[j]+1,dp[i]);
        }
        if(my_max<dp[i])my_max=dp[i],pos=i;
    }
    vector<int>v;
    for(int i=pos;i>=0;i--)
    {
        if(my_max==dp[i])
        {
            my_max--;
            v.emplace_back(arr[i]);
        }
    }
    reverse(v.begin(),v.end());
    return v;
}
//the lenght of lis
int longestIncreasingSubsequence(vector<int>&arr, int n)
{
    // Write Your Code here'
    vector<int>dp(n,1);//return the length of the longest increaing subsequence -->slow version
    int my_max=0;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            if(arr[j]<arr[i])
                dp[i]=max(dp[j]+1,dp[i]);
            my_max=max(my_max,dp[i]);
        }
    }
    return my_max;

}
//the length of lis using binary_search
int longest_increasing_subsequence(vector<int>&arr,int n)
{
    vector<int>sec;//get length using binarysearch
    sec.emplace_back(arr[0]);
    for(int i=1;i<n;i++)
    {
        int k= (int)(lower_bound(sec.begin(),sec.end(),arr[i])-sec.begin());
        if(k>=sec.size())
            sec.emplace_back(arr[i]);
        else
            sec[k]=arr[i];
    }
    return (int)sec.size();
}
//longest divisble subset
vector<int> divisibleSet(vector<int> &arr){
    // Write your code here.
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    sort(arr.begin(),arr.end());
    if(arr.size()==1)
    return arr;
    int n=(int)arr.size();
   int dp[n];
   for(auto &val:dp)val=1;
   int my_max=1;
   int pos=-1;
   int parent[n];for(int i=0;i<n;i++)parent[i]=i;
   for(int i=1;i<n;i++)
   {
       for(int j=0;j<i;j++)
       {
           if(arr[i]%arr[j]==0&&dp[j]+1>dp[i])
           {
               dp[i]=dp[j]+1;
               parent[i]=j;
               
           }
       }  
       if(dp[i]>my_max)
               {
                   my_max=dp[i];
                   pos=i;
               }  
   }
   vector<int>res;
      res.emplace_back(arr[pos]);
   while(parent[pos]!=pos)
   {
               pos=parent[pos];
        res.emplace_back(arr[pos]);
   }
   return res;
   
}
//longest chain vary with one
bool vary_with_one(string s1,string s2)
{
  if(s1.size()<s2.size())swap(s1,s2);
  if(s1.size()>s2.size()+1||s1.size()==s2.size())return false;
  int p1=0,p2=0;
  int v=0;
  while(p1<s1.size()&&p2<s2.size())
  {
      if(s1[p1]==s2[p2])
      p1++,p2++;
      else
      {
          p1++;
          v++;
          if(v>=2)return false;
      }
  }
  return true;
}
bool comp(string&a,string&b)
{
    return a.size()<b.size();
}
int longestStrChain(vector<string> &arr)
{
    // Write your code here.
    int n=arr.size();
    vector<int>dp(n,1);
    sort(arr.begin(),arr.end(),comp);
    int res=1;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            if(vary_with_one(arr[i],arr[j]))
            dp[i]=max(dp[i],dp[j]+1);
        }
        res=max(res,dp[i]);
    }
    
    return res;
}
//longest bitonic subsequence
vector<vector<vector<int>>>dp;
long long solve(int index,int last_index,int direction,vector<int>&arr,int n)
{
	if(index==n+1)return 0;
	if(dp[index][last_index][direction]!=-1)return dp[index][last_index][direction];
	if(direction==0)
	{
		long long res1=solve(index+1,last_index,direction,arr,n);
		long long res3=solve(index+1,last_index,!direction,arr,n);
		long long res2=0;
		if(arr[index]>arr[last_index])
		res2=max(solve(index+1,index,direction,arr,n)+1,1+solve(index+1,index,!direction,arr,n));
		return dp[index][last_index][direction]= max({res1,res2,res3});
	}
	else
	{
		long long res1=solve(index+1,last_index,direction,arr,n);
		long long res3=0;
		long long res2=0;
		if(arr[index]<arr[last_index])
		res2=solve(index+1,index,direction,arr,n)+1;
		return dp[index][last_index][direction]= max({res1,res2,res3});
	}

}
int longestBitonicSequence(vector<int>& arr, int n) {
	  // Write your code here.	   
	  vector<int>v(n+1);
	  dp.clear();
	  dp.resize(n+1,vector<vector<int>>(n+1,vector<int>(2,-1)));
	  for(int i=1;i<=n;i++)v[i]=arr[i-1];
	  return solve(1,0,0,v,n);

} 
//count how many lis in a given array
int findNumberOfLIS(vector<int> &arr)
{
    vector<int>dp(arr.size(),1);
    vector<int>cnt(arr.size()+100,1);
    int my_max=0;
    for(int i=1;i<arr.size();i++)
    {
        for(int j=0;j<i;j++)
        {
            if(arr[j]<arr[i])
               {    
                  if(dp[j]+1>dp[i])
                  {
                      dp[i]=dp[j]+1;
                      cnt[i]=cnt[j];
                  }
                  else
                  if(dp[j]==dp[i]-1)
                  {
                      cnt[i]+=cnt[j];
                  }
               }
        }
        my_max=max(dp[i],my_max);
    }
    int n=arr.size();
    long long res=0;
    for(int i=0;i<n;i++)
    {
        if(dp[i]==my_max)res+=cnt[i];
    }
    return res;
}
