void dfs(int node,int parent,vector<bool>&vis,vector<int>adj[],vector<int>&time,vector<int>&low,vector<vector<int>>&res,int &counter)
    {
        vis[node]=true;
        time[node]=counter;
        counter++;
        low[node]=time[node];
        for(auto &val:adj[node])
        {
            if(!vis[val])
                dfs(val,node,vis,adj,time,low,res,counter);
            if(val!=parent)
                low[node]=min(low[node],low[val]);
            if(time[node]<low[val])
                res.emplace_back(vector<int>{node,val});
        }
            
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int>adj[n];
        for(auto &val:connections)
        {
            adj[val[0]].emplace_back(val[1]);
            adj[val[1]].emplace_back(val[0]);
        }
        vector<int>time(n,0),low(n,INT_MAX);
        vector<vector<int>>res;
        vector<bool>vis(n,false);
        int c=0;
        dfs(0,-1,vis,adj,time,low,res,c);
        return res;
    }