                                       Disjoint set union datastructure         

DSU : it's a data structure allows two operations {merge , same set or not }

we represent the dsu as an array tree arr[value] = parent.

to join two sets we get the parent of the first set and the parent of the second set then make one of them the 
parent for the other one.

to know same componenet or not we get the parent of the first one and parent of the second one and compare.


how to find parent? we can climb the tree up until we reach a node that it's parent equal it's value.
int find(int child){
        if(child==parent[child])return child;
        return find(parent[child]);
}

merge: bool merge(int a,int b){
        a=find(a);
        b=find(b);
        if(a==b)return false;
        if(size[a]>size[b])swap(a,b);
        set_counter--;
        parent[a]=b;
        size[b]+=size[a];
        return true;
}

init: dsu (int n){
        this->n=n;
        size.resize(n,1),parent.resize(n);
        set_counter=n;
        iota(parent.begin(),parent.end(),0);
}

modified find : int find(int child){ //follow acraman inverse function acraman(1e9) = 5
        if(child==parent[child])return child;
        return parent[child] = find(parent[child]);
}

improved dsu ables you to merge and find and get elements of specific set

struct dsu{
    int n,cnt;
    vector<int>size,parent,nxt,tail,sets,pos;
    void init(int nn){
        this->n=nn;
        size.resize(n,1);
        parent.resize(n);
        nxt.resize(n,-1);
        sets.resize(n);
        pos.resize(n);
        tail.resize(n);
        iota(parent.begin(),parent.end(),0);
        iota(tail.begin(),tail.end(),0);
        iota(sets.begin(),sets.end(),0);
        iota(pos.begin(),pos.end(),0);
        cnt=nn;
    }
    dsu (int n=0){
        init(n);
    }
    int find(int child){
        return (child==parent[child]?child:parent[child]=find(parent[child]));
    }
    bool merge(int u,int v){
        u=find(u);
        v=find(v);
        if(v==u)return false;
        if(size[u]<size[v])swap(u,v);
        parent[v]=u;
        size[u]+=size[v];
        int p=pos[v];
        pos[sets[p]=sets[--cnt]]=p;
        int &t=tail[u];
        nxt[t]=v;
        t=tail[v];
        return true;

    }
    vector<int>get_set(int node){
        node=find(node);
        vector<int>res;
        for(int i=sets[node];~i;i=nxt[i]){
            res.emplace_back(i);
        }
        return  res;
    }
};
==============================================================================================================================================================================================================================
MontonicStack:
struct MonotonicStack{
   stack<pair<int,int>>st;
   MonotonicStack(){
       st.emplace(-inf,-inf);
   }
   void push(int x){
       st.emplace(x,std::max(st.top().second,x));
   }
   void pop(){
       st.pop();
   }
   int top(){
       return st.top().first;
   }
   int max(){
       return st.top().second;
   }
   int size(){
       return (int)((int)st.size()-1);
   }
   bool empty(){
       return size()==0;
   }
};
===============================================================================================================
===============================================================================================================
MontonicQueue:
struct MonotonicQueue{
    MonotonicStack add,remove;
    void push(int value){
        add.push(value);
    }
    void move(){
        while(!add.empty()){
            remove.push(add.top());
            add.pop();
        }
    }
    void pop(){
        if(remove.empty())move();
        remove.pop();
    }
    int top(){
        if(remove.empty())move();
        return remove.top();
    }
    int max(){
        return std::max(remove.max(),add.max());
    }
    int size(){
        return remove.size()+add.size();
    }
    bool empty(){
        return !size();
    }
};
===============================================================================================================
===============================================================================================================
