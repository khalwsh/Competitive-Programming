segment tree is able to change the value of elements and give a value for a range function
range fucntion could be anything.

segment tree is  a binary tree where each node represents a segment or a range of indices in the array. The root node represents the entire array, and each leaf node represents a single element of the array.

The segment tree is built recursively by dividing the array into two halves and creating two child nodes for each parent node. Each parent node represents the range of indices covered by its two child nodes. The value of each parent node is computed based on the values of its child nodes.

The segment tree allows for efficient range queries and updates by traversing the tree and combining the values of the nodes that overlap with the given range. For example, to find the sum of elements in a given range, we can traverse the tree and add the values of the nodes that overlap with the range.

Segment tree has a time complexity of O(log n) for both range queries and updates, where n is the size of the array. It is commonly used in various applications such as finding the minimum or maximum element in a range, computing the sum of elements in a range, and finding the greatest common divisor or least common multiple of elements in a range.

segment tree is represented as an array of size 4*n where n is the size of array it represent and every index
has 2*index+1,2*index+2 as it's children unless it's a leaf.

every node has a specifc range that solve for starting from root has range of 0,n-1 then the left child
has range of [parent.left,mid] and the right child has [mid+1,parent.right].

segment tree building is o(n) and it done by starting from root and has range of 0,n-1 then recurse to left 
and right child compute them then tree[node]=f(tree[2*node+1],tree[2*node+2]) and the base case
when you reach to a node that it's range is one element then make tree[node]=array[index_of_element],return;

when quering you return f(query[right],query[left]) and base cases is if the range of the node is totally overlap
with the range of query return tree[node],else if there is no overlapping return no_operation else complete calls.

updating a single element: start from root until reaching to a node is leaf node and it's range is the index
we want to update then update it and return and when backtracking recompute the values again form nodes in 
the path from root to this leaf. O(log n).

updating a range of elements (lazy propagation):Lazy propagation is a technique used in segment trees to optimize range queries and updates. In a segment tree, each node represents a range of elements in an array. The root node represents the entire array, and each child node represents a smaller range of elements.

When a range update is performed on a node, all the elements in that range are updated. However, in some cases, it may be more efficient to delay the update until it is actually needed. This is where lazy propagation comes in.

In lazy propagation, instead of updating all the elements in a range immediately, we store the update information in the node itself. This update information is called the "lazy" value. When a query is made on a node, we first check if there is any lazy value stored in that node. If there is, we apply the update to the node and propagate the lazy value to its children.

This way, we avoid unnecessary updates and save time and space. Lazy propagation is particularly useful when there are many updates to be made on a large segment tree. It reduces the number of updates needed and makes the queries faster.

To summarize, lazy propagation is a technique used in segment trees to optimize range queries and updates by delaying updates until they are actually needed. 
---------------------------------------------------------------
Segment tree beats: it helps at some queries that normal segment tree can't hanlde like ( range %,/ )
also range ( min for cur value and x , max for cur value and x),range sqrt,....

you can handle these queires by adding extra conditions to break fast so there exists some cases where you
traverse to the deep depth of the tree and some cases break fast this depend on you node members and breaking
conditions.

ex: update range by taking every element sqrt and query get the sum
this depend of a fact sqrt(0)=0,sqrt(1)=1 so if the elements of the range in update less than 2 then no meaning for update. and we can prove that there is no more than 6 times take the sqrt in order to reach 0 or 1 if rounded. so the nodes item will be the sum and flag for checking if all the elements within range is less than
2.

struct NodeSqrt{
    int sum;
    bool LessThan2;
    void fill(int S,bool L){
        sum=S;
        LessThan2=L;
    }
};
class SegmentTreeBeatsSqrt{
public:
    int n;
    vector<NodeSqrt>tree;
    SegmentTreeBeatsSqrt(int n){
        this->n=n;
        tree.resize(4*n);
    }
    void build(int node,int nl,int nr,vector<int>&v){
        if(nl==nr){
            tree[node].fill(v[nl],v[nl]<2);
            return;
        }
        int mid=nl+(nr-nl)/2;
        build(2*node+1,nl,mid,v);
        build(2*node+2,mid+1,nr,v);
        tree[node].fill(tree[2*node+1].sum+tree[2*node+2].sum,
                        tree[2*node+1].LessThan2&&tree[2*node+2].LessThan2);

    }
    void update(int node,int nl,int nr,int l,int r){
        if(nl>r||nr<l||tree[node].LessThan2)return;
        if(nl==nr){
            tree[node].fill((int)sqrt(tree[node].sum),(int)(sqrt(tree[node].sum))<2);
            return;
        }
        int mid=nl+(nr-nl)/2;
        update(2*node+1,nl,mid,l,r);
        update(2*node+2,mid+1,nr,l,r);
        tree[node].fill(tree[2*node+1].sum+tree[2*node+2].sum,
                        tree[2*node+1].LessThan2&&tree[2*node+2].LessThan2);
    }
    int query(int node,int nl,int nr,int l,int r){
        if(nl>r||nr<l)return 0;
        if(nl>=l&&nr<=r)return tree[node].sum;
        int mid=nl+(nr-nl)/2;
        return query(2*node+1,nl,mid,l,r)+query(2*node+2,mid+1,nr,l,r);
    }
};


