MATRIX EXPONENTIATION

Prerequisites:
- binary exponentiation
- iterative dp  --> you transform the tranisation to Mat expo for optimize
- Fibonacci sequence
-------------------------------------------------------
notes:
- if you can solve it with O(1) space with dp so we can use matrix expo.
- give weights for every variable like
      new_a = 0 * a + 1 * b
      new_b = 1 * a + 0 * b
then the matrix is {{0,1},{1,0}}


-------------------------------------------------------
1- RANDOM MOOD

bob can be either happy or sad. his mood switches with probability p every
minute. if he's happy right now, what is the probability that he's happy 
after N minutes?

you can use simple dp--> dp[i][j]: in the ith second and jth mood
dp[i][j] = dp[i-1][j](1 - p) + dp[i-1][j ^ 1] * p

but this solution solve for n <= 1e7

using binary exponentiation you can solve it in log time

P1 is known so P2 = P1 * (1 - P1) + (1 - P1) * P1

P4 = P2 * (1 - P2) + (1 - P2) * P2
-------------------------------------------------------
2- STRING MOOD
bob can be either happy or sad. His mood changes when reading a vowel and
he become sad if reading 'S','D' and happy if reading 'H' else his mood 
doesn't change.
how many strings of length n that Ending up making him happy ?

int a[2][2]; N = 2
int b[2][2]; N = 4

a[0][0] is the number of 2-letter strings that move happy to happy
a[0][1] is the number of 2-letter strings that move happy to sad
a[1][0] is the number of 2-letter strings that move sad to happy
a[1][1] is the number of 2-letter strings that move sad to sad

b[0][0] is the number of 4-letter strings that move happy to happy
b[0][1] is the number of 4-letter strings that move happy to sad
b[1][0] is the number of 4-letter strings that move sad to happy
b[1][1] is the number of 4-letter strings that move sad to sad

How to combine them to have c[2][2] where it represent N = 6

c[0][0] = a[0][0] * b[0][0] + a[0][1] * b[1][0]
c[0][1] = ....

c[i][k] += a[i][j] * b[j][k] 

if you are happy there is a 19 way to stay happy
if you are happy there is a 7 way to become sad
if you are sad there is a 6 way to be happy 
if you are sad there is a 20 way to stay sad

so a = {{19,7},{6,20}} is the matrix and answer is 

a ^ n [0][0]
-------------------------------------------------------
The General Approach
- when ever we have initial state S0
- And we move to nxt state using basic sum/multiply operation

- Try to define initial state in square matrix: S0
- Try to define the basic operations in transition matrix: T

- such that: S0 * T = S1
- Then to move to nth state: S0 * T ^ (n - d - 1)
where d is the matrix diemnsion


Constructing Matrices
- This is the tough part. We learn it by experience
- Typically matrices are square.
- If Terms are only summed and multiplied by constatns this is easy
- if F(i) depends on last k terms, try first matrix k * k
- Focus with First row,each element expresses an F(i)
- Initialize it with the base cases
- Construct transition to move them
-------------------------------------------------------
Imaginary sequence:
F[0] = 1 , F[1] = 3 , F[2] = 4
F[n] = 2 * F[n-3] + F[n-2] - 4 * F[n-1]

then the iniial matrix:
[1 3 4]
[0 0 0]
[0 0 0]

and we need to make a transation matrix that when multiplied with inital
do this:
[3 4 X]
[0 0 0]
[0 0 0]

so we need to make new matrix 
[0 0 2]
[1 0 1]
[0 1 -4]

to make the shifts and the last colomn have the weights
-------------------------------------------------------
Powers of Adjacency Matrix
- if we have binary adjacency matrix of a graph, what powering it means?
if matrix is powered to k then:
  - each cell(i,j) = the number of paths of length exactly k from node i to
    node j. Cell(i,i) is for cycles.
--------------------------------------------------------
if you want to get the number of paths in the graph up to k 

- from every vertex add an edge to a fake vertex N + 1 , also add an edge
between N + 1 , N + 1

every path of length x in the initial graph corresponds to a path of length
x + 1, x + 2, .... ending at Vertex N + 1.
--------------------------------------------------------
how to get the Nth term of linear recurrence relation in o(log(n))

F[n] = C[i] * F[n-i] : 1 <= i <= k

To solve this we construct 2 matrices k * k
- base matrix which have the first colomn in it as the base case
[x00]
[y00]----> this is an example of sequence starts with x,y,z F[n] depend on 
[z00]      last 3 values of the recurrence
