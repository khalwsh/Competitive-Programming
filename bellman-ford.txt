vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        // Code here
        vector<int>dist(V,100000000);
        dist[S]=0;
        for(int i=0;i<V;i++)
        {
            for(auto &val:edges)
            {
                int from=val[0];
                int to=val[1];
                int cost=val[2];
                if(dist[from]+cost<dist[to])
                {
                    dist[to]=dist[from]+cost;
                    if(i==V-1)
                    return {-1};
                }
            }
        }
        return dist;
    }
//printing a negative cycle in the given graph
#include<bits/stdc++.h>
using namespace std;
#define line '\n'
#define khaled ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
bool line_checking(long long a1,long long b1,long long a2,long long b2,long long a3,long long b3){return (a3-a1)*(b2-b1)==(a2-a1)*(b3-b1);}
bool valid(int i,int j,int n,int m){return i>=0&&i<n&&j>=0&&j<m;}
long long mul(long long x,long long y,const long long&mod){return ((x%mod)*(y%mod))%mod;}
long long add(long long x,long long y,const long long&mod){return (((x%mod)+(y%mod))%mod+mod)%mod;}
long long fast_power(long long base,long long power,const long long &mod=INT64_MAX){if(power==0)return 1ll;long long d= fast_power(base,power/2)%mod;d=mul(d,d,mod);if(power&1)return mul(d,base,mod);else return d;}
long long mod_inverse_fermat(long long B,const long long&mod=1e9+7){ return fast_power(B,mod-2);}//mod is prime
int dx[]{1,-1,0,0,1,1,-1,-1};//0->4 normal,4->8 diagonal
int dy[]{0,0,1,-1,1,-1,1,-1};
#define int long long
/*--------------------------------------------------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------------------------------------------------*/
vector<int>path;
int cycle=-1;
vector<int>parent;
bool bellman_ford(vector<pair<int,pair<int,int>>>&edges,int n)
{
    vector<int>dist(n,1e16);
    dist[0]=0;
    bool flag=false;
    parent.resize(n);
    for(int i=0;i<n;i++)
    {
        for(auto &val:edges)
        {
            int from=val.first;
            int to=val.second.first;
            int cost=val.second.second;
            if(dist[from]+cost<dist[to])
            {
                dist[to]=cost+dist[from];
                if(i==n-1)
                {
                    flag=true;
                }
                cycle=to;
                parent[to]=from;
            }
        }
    }
    return flag;
}
signed main(){
    khaled
    int n;
    cin>>n;
    int m;
    cin>>m;
    vector<pair<int,int>>adj[n];
    vector<pair<int,pair<int,int>>>edges(m);
    for(int i=0;i<m;i++)
    {
        int a,b,cost;
        cin>>a>>b>>cost;
        a--,b--;
        adj[a].emplace_back(b,cost);
        edges.emplace_back(a, make_pair(b,cost));
    }
    if(!bellman_ford(edges,n))
    {
        cout<<"NO";
    }
    else
    {
        cout<<"YES";
        cout<<line;
        for (int i = 0; i < n; ++i)
            cycle=parent[cycle];
        for (int v = cycle;; v = parent[v]) {
            path.push_back(v);
            if (v == cycle && path.size() > 1)
                break;
        }
        reverse(path.begin(), path.end());
        for(auto &val:path)
            cout<<val+1<<" ";
    }
}