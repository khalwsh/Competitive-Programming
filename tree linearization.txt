how to flatten a tree?

using timing array that store the starting timing and ending timeing of every node

timing[node].first,timing[node].second ----> start time for node and ending time for node 

then make new array that mark the value of the node in starting time of it,the array size is max time+1--->2*n

newArray[timing[node].first]=nodeValue;

then you have made a flatten 
every node has it's subtree between indexs {newArray[timing[node].first],newArray[timing[node].second]};

the node postion is newArray[timing[node].first];
------------------------------------
//code

int cnt=0;
pair<int,int>timing[N];
vector<int>adj[N];
void flatten(int node,int parent){
    timing[node].first=cnt++;
    for(auto &val:adj[node]){
        if(val==parent)continue;
        flatten(val,node);
    }
    timing[node].second=cnt++;
}

bool contain(int a,int b){
    return timing[a].first<timing[b].first&&timing[a].second>timing[b].second;
}

int n;
    cin>>n;
    for(auto &val:timing)val= make_pair(-1,-1);
    vector<pair<int,int>>edges(n-1);
    for(int i=0;i<n-1;i++){
        int a,b;
        cin>>a>>b;
        a--,b--;
        adj[a].emplace_back(b);
        adj[b].emplace_back(a);
        edges[i]= make_pair(a,b);
    }
    flatten(root,-1);

}
------------------------------------
