void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n=(int)matrix.size();
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	       
	            if(matrix[i][j]==-1)
	            matrix[i][j]=1000000;
	        }
	    }
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            for(int k=0;k<n;k++)
	            matrix[j][k]=min(matrix[j][k],matrix[j][i]+matrix[i][k]);
	        }
	    }
	    for(auto &val:matrix)for(auto &i:val)if(i==1000000)i=-1;
	    
}
void floyed_warshall_find_path_with_min_max_edge(vector<vector<int>>&adj,int n)
{
    //find road that max value is minmum
    for(int k=0;k<n;k++)//via
    {
        for(int i=0;i<n;i++)//from
        {
            for(int j=0;j<n;j++)//to
                adj[i][j]=min(adj[i][j],max(adj[i][k],adj[k][j]));
        }
    }
}
void floyed_path_exist_or_not(vector<vector<bool>>&adj,int n)
{
    for(int k=0;k<n;k++)//via
    {
        for(int i=0;i<n;i++)//from
        {
            for(int j=0;j<n;j++)//to
                adj[i][j]=(adj[i][j]|(adj[i][k]&adj[k][j]));
        }
    }
}
void floyed_warshall_find_path_with_max_min_edge(vector<vector<int>>&adj,int n)
{
    //find road that min value is maximum
    for(int k=0;k<n;k++)//via
    {
        for(int i=0;i<n;i++)//from
        {
            for(int j=0;j<n;j++)//to
                adj[i][j]=max(adj[i][j],min(adj[i][k],adj[k][j]));
        }
    }
}
void floyed_warshall_find_longest_path_in_a_DAG(vector<vector<int>>&adj,int n)
{
    for(int k=0;k<n;k++)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                adj[i][j]=max(adj[i][j],max(adj[i][k],adj[k][j]));
            }
        }
    }
}
void floyed_warshall_count_paths(vector<vector<int>>&adj,int n)
{
    for(int k=0;k<n;k++)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
                adj[i][j]+=adj[i][k]*adj[k][j];
        }
    }
}
bool floyed_negative_cycle(vector<vector<int>>&adj,int n)
{
    for(int i=0;i<n;i++)
        if(adj[i][i]!=0)
            return true;
    return false;
}
bool negative_cycle_affect_on_two_nodes(vector<vector<int>>&adj,int n,int source,int dist)
{
    for(int i=0;i<n;i++)
    {
        if(adj[i][i]!=0&&adj[source][i]<INT_MAX&&adj[i][dist]<INT_MAX)
            return true;
    }
    return false;
}
int graph_diameter_using_floyed(vector<vector<int>>&adj,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            for(int k=0;k<n;k++)
            {
                adj[j][k]=min(adj[j][k],adj[j][i]+adj[i][k]);
            }
        }
    }
    int graph_diameter=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(adj[i][j]<INT_MAX)
                graph_diameter=max(graph_diameter,adj[i][j]);
        }
    }
    return graph_diameter;
}