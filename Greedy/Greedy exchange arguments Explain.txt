Greedy: 
- Do only 1 choice based on Intuition / Herusitic
- Then we move to only one child substate , only new subproblem and again
apply greedy.
- Greedy finds a global optimal solution or approximate
- Greedy makes the choice that looks best at the moment
- you must proof it

ex 1: Activity selection problem -- > sort on the ending time
      dp: sort on starting time [leave  ,  take but take care of your next]

ex 2: Fractional Knapsack problem -- > sort on cost per unit
-------------------------------------------------------------------
if you have two numbers a , b : a + b = n and want to maximize a * b ?

lets proof it for the even case,

a = b = x = n / 2 how to proof this is optimal?

a * b = x * x
now: 
let  a = x + y
then b = x - y 

now a * b = x * x - y * y then to maximize make y = 0

-------------------------------------------------------------------

O* : optimal solution

G  : greedy  solution

and you should prove that O* == G 

-------------------------------------------------------------------
Greedy solution have some properties

optimal solution have some properties

step 1: labebl solutions Greedy [G] , optimal [O*] 

step 2: compare greedy Vs optimal
   
       - ( X is part of O* and not in G) or inverse 
        
       - S1 , S2 , S3 , .... , Si , .... , Sj

Step 3: Exchange

O* >= O*1 >= O*2 ...... = G

Greedy solution should be as least as good as the optimal solution
-------------------------------------------------------------------

Tip: Explore cost exchange when 2 indcies swap
-------------------------------------------------------------------
problem: Split the Sequence

you have a sequence and you want to split the sequence to k consecutive 
sub arrays to maximize value (summation of group * remaining suffix sum
for all k group)


4 | 1 3 | 4 0 | 2 3

value = 4 * 13 + 4 * 9 + 4 * 5
-------------------------------------------------------------------





