                                               Combinatorics
==============================================================================================================
==============================================================================================================
                       /******calculating biggest power divisor for factorial******/

int biggest_power_divide_factorial(int n,int k){
    vector<int>factors;
    for(int i=2;i*i<=k;i++){
        if(k%i==0) {
            while (k % i == 0) {
                k /= i;
            }
            factors.emplace_back(i);
        }
    }
    if(k!=1)factors.emplace_back(k);
    int res=inf;
    for(auto &val:factors){
        int temp=n;
        int toto_res=0;
        while(temp>1){
            toto_res+=temp/val;
            temp/=val;
        }
        res=min(res,toto_res);
    }
    return res;
}
==============================================================================================================
==============================================================================================================
permutation : nPr is the number of different arrangement of r objects out of n objects.
nPr-->n!/(n-r)!
==============================================================================================================
==============================================================================================================
binomial coefficients :
they are the numbers of way to select a set of k elements from n different elements without taking into 
account the order of arrangement of these elements.

(a+b)^n--> nCr(n,0)*a^n*b^0+nCr(n,1)*a^(n-1)*b+.....+nCr(n,n)*a^0*b^n.

you can calculate nCr by using pascal triangle : pascal[n][r] = nCr(n,r) 
---------------------------------
nCr(n,r) = n!/(k!*(n-k)!)
---------------------------------
nCr(n,r) = nCr(n-1,r) + nCr(n-1,r-1) , nCr(n,n) = 1 , nCr(n,0) = 1
if (r>n) nCr(n,r) is zero.
---------------------------------
nCr(n,k) equal all of following :
1) nCr(n,n-k)
2) n/k*nCr(n-1,k-1)
---------------------------------
for(int i=0;i<=n;i++) nCr(n,i) this is equal to 2^n.
---------------------------------
for(int i=0;i<=n;i++) nCr(i,k) this is equal nCr(n+1,k+1).
---------------------------------
implemntation of nCr with mod using modular inverse:
int nCr(int n,int r){
    return mul(factorial[n],mul(fast_power(fact[r],mod-2,mod),fast_power(fact[n-r],mod-2,mod),mod),mod);
}
----------------------------------
Let’s say we choose k elements from an n-element set, the order doesn’t matter and each element can be chosen more than once. In that case, the number of different combinations is: n+k-1 choose k;

the number of valid solution of the following equation:x1+x2+x3+...+xn = k.--> nCr(n+k-1,k). :x in [0,n]

For example, let’s say we have 11 identical balls and 3 different pockets, and we need to calculate the number of different divisions of these balls to the pockets. There would be: nCr(11+3-1,11)
----------------------------------
how many way to reach from 0,0 to n,m is nCr(n+m,n)
how many way to reach from x,y to n,m is nCr(n+m-x-y,n-x)
how many way to reach from 0,0,0 to x,y,z is (x+y+z)!/(x!y!z!)
how many way to reach from 0,0 to n,n with no touching of diagnals is catalan of n nCr(2*n,n)/(n+1).
number of labeled trees on n nodes is n^(n-2).
----------------------------------
calculating nCr for n,r up to 1e18

int big_nCr(int n,int r,int mod){
   if(r==0)return 1;
   int n_digit=n%mod;
   int r_digit=r%mod;
   return (normal_nCr(n_digit,r_digit,mod)*big_nCr(n/mod,r/mod,mod))%mod;
}
==============================================================================================================
==============================================================================================================

*The number of different permutations of n objects, where there are n1 indistinguishable objects of type 1, n2 indistinguishable objects of type 2,…, and nk indistinguishable objects of type k (n1+n2+…+nk=n), is:
factorial(n)/(factorial(freq[n1])*factorial(freq[n2])*,......,factorial(freq[nk]));

*count number of way to move from cell (0,0) to cell (x,y) is nCr(x+y,y).
this could be general like moving form cell (a,b) to cell (c,d) is nCr (|c-a|,|d-b|) on grid.

==============================================================================================================
==============================================================================================================
Binary vectors :

1. Number of binary vectors of length n: 2 to power of n.

2. Number of binary vectors of length n and with k ‘1’ is: nCr (n,k)

3. the Number of ordered pairs (a,b) of binary vectors, such that distance between them is k can be calculated 
as follows: 2 to power of n * nCr(n,k) 
the distant between binary vector a and binary vector b is the number of elements that differ from binary
vector a and binary vector b.
ex: a{1,1,0,1},b{0,0,0,1} the distant between them is 2 because index 0,1 have not equal values.

the number of binary vectors that the distant between them is k: 2 to power of n * nCr (n,k)
proof:Let a = (a1, a2, …an), b = (b1, b2, …bn) and distance between them is k. Next, 
let’s look at the sequence of pairs (a1, b1), (a2, b2), … (an, bn). 
There are exactly k indices i in which ai ≠ bi. They can be (0,1) or (1,0), so there are 2 variants,
and n-k can be either (0,0) or (1,1), for another 2 variants.

==============================================================================================================
==============================================================================================================
Catalan Numbers : Catalan numbers is a number sequence, which is found useful in a number of combinatorial problems, often involving recursively-defined objects.( 1 , 1, 2, 5, 14, 42 ,....).

Application in some combinatorial problems:
     * number of correct bracket sequence consists of n open and n close brackets
     * number of full binary trees of (n+1) leaves
     * number of ways to parenthesize n+1 factor
     * number of triangulations of a convex polygon of n+2 vertex,triangulations: is the process
       of dividing the polygon into triangles with no overlap by connect it's vertex
     * number of ways to connect 2*n points on circle to form n disjoint lines
     * number of monotonic lattice paths from point (0,0) to point(n,n) which no path above the main diagonal
       from(0,0) to (n,n)
     * number of permutation of length n which can be StackSorted
     * the number of NonCrossing partitions of a set of n elements.
     * the number of ways to cover the ladder 1....n of n rectangles
       (ladder consists of n columns , where ith has height i).
formulas:
catalan [n]= for(int i=0;i<=n-1;i++) summation of catlan[i]*catlan[n-1-i] ,catlan[0]=0,catlan[1]=1.
catalan [n]= nCr(2n,n)*1/(n+1).

implemnation of catlan:

int dp[N];
int catalan(int n){
    if(n<=1)return 1;
    int &ret=dp[n]; 
    if(~ret)return ret;
    int sum=0;
    for(int i=0;i<=n-1;i++){
        sum+=catalan(i)* catalan(n-i-1);
    }
    return ret=sum;
}
==============================================================================================================
==============================================================================================================
striling number :

//S[i][j]=S[i-1][j-1]+s[i-1][j]*(i-1)
//S(n,k) as the different ways to cut n different elements into k undifferentiated non-empty subsets. For example, S(5,3) denotes to:25.

implemnation of striling number:
int stirling_number(int n,int k){
    if(k==0)return n==0;
    if(n==0)return 0;
    return stirling_number(n-1,k-1)+(n-1)* stirling_number(n-1,k);
}
s(n,k)=summation from i=0 to i=k ((-1)^(k-i)*(i^n))/(i!*(k-i)!);
==============================================================================================================
==============================================================================================================
derangemnt : this is the number of permutation that p[i]!=i;
implemntation :

int derangement(int n){
    if(n<=2){
        return n!=1;
    }
    return (n-1)*(derangement(n-1)+ derangement(n-2));//apply dp
}

example of usage : assume a group of friends in Eid every one of them bought a gift and every one of them 
could give any one the gift he bought but he can't give it to him self in how many way they can give each
other the gifts.
so it's acually asking for derangement (n).
==============================================================================================================
==============================================================================================================
The inclusion-Exclusion Principle: it's an important combinatorialway to compute the size of a set or the 
probability of complex event.
it relates the sizes of individual sets with their union.

The inclusion-exclusion principle can be expressed as follows:

To compute the size of a union of multiple sets, it is necessary to sum the sizes of these sets separately, and then subtract the sizes of all pairwise intersections of the sets, then add back the size of the intersections of triples of the sets, subtract the size of quadruples of the sets, and so on, up to the intersection of all sets.

the bref of this techniques : generate all sets take odd sets with postive sign and even size sets
with negative sign. :)
---------------------------
some problems :
---------------------------
A)task on permutation :
count how many permutations of numbers from 0 to 9 exist such that the first element is greater than 1 and 
the last one is less than 8.
let's use backward thinking and calculate the number of bad permutation ("permutation that starts with 0,1 
or ends with 8,9 or do both).
#bad permutation = 2 ( as the first index 0 or 1) * 9! + 2 (as the last index 8 or 9).
but of course we made duplicates cause the permutation that start with 0 or 1 could end with 8 or 9.
so by using the inclusion-exclusion principle we could remove duplicates by substracting the number of ways
that both happens (even set) {0,9},{0,8},{1,8},{1,9} so we substract 2( zero or one)*2(eight or nine)*8!.

note: this could be general like same question instead of greater than 1 could be x same tecnique.
---------------------------
B)task on generating sequence : given (x,y,z) how many sequences of length n exist consisting of only x,y,z 
such that each number occurs at least once.
lets use backward thinking again.
res=3^n-how many way i have n length sequences that contain 2 digits only (solve using inclusive exclusive)
how many way i have n length sequence = 2^n*3(single element)-3(as sequence of two generated by only two 
elements is only one way).
----------------------------
take alook on cp algorithms task section.
==============================================================================================================
==============================================================================================================
the elegnat method of paths (or trajectories):
The main idea is to find a geometrical interpretation for the problem in which we should calculate the number of paths of a special type. More precisely, if we have two points A, B on a plane with integer coordinates, then we will operate only with the shortest paths between A and B that pass only through the lines of the integer grid and that can be done only in horizontal or vertical movements with length equal to 1.
All paths between A and B have the same length equal to n+m (where n is the difference between x-coordinates and m is the difference between y-coordinates). We can easily calculate the number of all the paths between A and B as follows:
nCr(n+m,n).
note : what if there is restrection like there is a border you can't cross to solve this we can calculate 
the nCr(n+m,n) normally then substract the same formula but using it on the reflection of the starting point
around the border line. this could be useful to solve alot of problems like Dyck word.
also if starting point is (a,b) and ending point is (a+n,b+n) the answer directly is catlan of n.
==============================================================================================================
==============================================================================================================
stars and bars :
Stars and bars is a mathematical technique for solving certain combinatorial problems. It occurs whenever you want to count the number of ways to group identical objects.
The number of ways to  put n identical objects into k boxes is nCr(n+k-1,k).
also this solves the number of ways to solve : x1+x2+....+xn = k. (non negative solutions)
if there is a lowerbound like xi>=y substract y*n from the other part then solve.
if there is an upperbound like xi<=y solve using inclusive exclusive principle.
==============================================================================================================
==============================================================================================================
permutation-indexing:
get the permutation by knowing it's length and it's index in sorted order from small to large

vector<long long>factorial(long long n,const long long& mod)
{vector<long long>v(n+1,1);for(int i=2;i<=n;i++)v[i]=mul(i,v[i-1],mod);return v;}


//this function take length and index return the permutation that in order of small to large it's index is nth

vector<int>get_nth_permutation(int len,int nth){
    ordered_set<int>v;
    for(int i=0;i<len;i++)
        v.insert(i+1);
    vector<int>res;
    nth--;
    vector<int>fact= factorial(len,INT64_MAX);
    for(int i=len-1;i>=0;i--){
        int p=nth/fact[i];
        res.emplace_back(*v.find_by_order(p));
        v.erase(v.find_by_order(p));
        nth%= fact[i];
    }
    return res;
}

//this function uses the old function it solve the following given a permutation what is it's index in order of small to large

int permutation_in_order(vector<int>&v){
    int len=(int)v.size();
    vector<int>fact= factorial(len,INT64_MAX);
    int left=1,right=fact[len];
    while(left<=right){
        int mid=left+(right-left)/2;
        vector<int>temp= get_nth_permutation(len,mid);
        if(temp==v)return mid;
        else if(temp>v)right=mid-1;
        else left=mid+1;
    }
    return -1;
}

//if there is a permutation or string that is applied to some funtion that change it's order then the permutation or the string will return 

//to it's orginal state after n where n is the lcm of the length of the cycles in the operations

//inclusion exclusion princible : process all subset if odd inculde it else exclude it
==============================================================================================================
==============================================================================================================
Burnside's lemma:
Burnside’s lemma can be used to count the number of combinations so that
only one representative is counted for each group of symmetric combinations.

Burnside’s lemma states that the number of combinations is: summation from k=1 to n c(k)/n.
where there are n ways to change the position of a combination, and there are
c(k) combinations that remain unchanged when the kth way is applied.
As an example, let us calculate the number of necklaces of n pearls, where
each pearl has m possible colors. Two necklaces are symmetric if they are similar
after rotating them. 
the number of necklaces : summation from 1 to n (m^gcd(i,n))/n.

implemntation:
int g[N];
int n,m;
    cin>>n>>m;
    for(int i=0;i<N;i++)g[i]=__gcd(i,n);
    int inv=fast_power(n,mod-2,mod);
    int res=0;
    for(int i=0;i<n;i++){
        res=add(res,mul(fast_power(m,g[i],mod),inv,mod) ,mod);
    }
    cout<<res<<line;
==============================================================================================================
==============================================================================================================
Cayley's formula : it states that there is a n^(n-2) labeled trees that contain n nodes. the nodes are 
labeled 1,2,...,n and two trees are different if either their structure or labeling is different.
when n = 4 there is a 4^(4-2) different n labeled nodes that formed a tree

note: 1-2-3-4,1-3-4-2 are both trees and there are different.

==============================================================================================================
==============================================================================================================
prufer code: a sequence of n−2 numbers that describes a labeled tree. The
code is constructed by following a process that removes n−2 leaves from the tree.
At each step, the leaf with the smallest label is removed, and the label of its only
neighbor is added to the code.

example consider the following graph:{{1,4},{3,4},{2,4},{2,5}} this a tree.
first remove the label 1 and add 4 to purfer code
second remove the label 3 and add 4 to purfer code
third remove the label 4 and add 2 to purfer code.

purfer code {4,4,2}.
==============================================================================================================
==============================================================================================================
resources:
https://cp-algorithms.com/algebra/factorial-divisors.html
https://www.topcoder.com/thrive/articles/Basics%20of%20Combinatorics
https://www.youtube.com/watch?v=M5PbeUrOsDw&list=WL&index=14&t=5838s
this guy blogs:https://codeforces.com/profile/Black_Fate
codeforces handbook combinatorics section.
